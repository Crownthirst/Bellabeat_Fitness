#test model on test data
ais_result <- predict(ais_fit,new_data=ais_test) %>%
bind_cols(ais_test)
ais_result
#find the rsq of the result for the test data
rsq(data = ais_result, truth = ht, estimate = .pred)
file.exists('test-file.csv')
districts <- read_csv('datasets/star/districts.csv')
spec(districts)
head(districts
head(districts)
head(districts)
spec(districts)
str(districts.csv)
read.csv('datasets/star/districts.csv')
str(districts.csv)
districts <- read_csv('datasets/star/districts.csv')
tar/districts.csv')
str(districts.csv)
spec(districts)
spec(districts)
library(tidyverse)
library(readxl)
#Open census dataset
census <- read_csv('datasets/census/census.csv')
#open census-divisions dataset
division <- read_csv('datasets/census/census-divisions.csv')
head(census)
head(division)
#merge census and division dataset by state
cens_div <- left_join(census,division)
#sort data
arrange(cens_div, region,division,desc(population))
#open write to excel library
library(writexl)
#write data to excel worksheet
write_xlsx(cens_div,'output/cens_div.xlsx')
#drop postalcode field from merged dataset
cens_div <- select(cens_div,c(-postal_code))
#create new column titled density
cens_div <- cens_div %>%
mutate(density = population/land_area)
head(cens_div)
#relationship between land area and population for all observations in 2015
#first fiter data by 2015
cens_2015 <- filter(cens_div,year==2015)
ggplot(data=cens_2015,
aes(x=land_area,y=population))+
geom_point()+
xlab('land area')+ylab('population')+
ggtitle('land_area versus population')
#total population for each region 2015
cens_2015 %>%
group_by(region) %>%
summarize(ttl_population = sum(population))
#create table containing state names and population
pivot_wider(data = select(cens_div, c('state','population','year')),
names_from = 'year', values_from='population')
library(tidyverse)
library(psych)
library(tidymodels)
#read data in, select the columns we need
mpg <- read_csv('datasets/mpg/mpg.csv') %>%
select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
describe(mpg)
#count origin
mpg %>%
count(origin)
#Origins broken down by cylinders
mpg %>%
count(origin,cylinders) %>%
pivot_wider(values_from = n, names_from =cylinders)
#descriptive statistics by group
mpg %>%
select(mpg,origin) %>%
describeBy(group = "origin")
#plot the distribution of mpg
ggplot(data = mpg,
aes(x=mpg))+
geom_histogram()+
xlab('mpg')+ylab('count')+
ggtitle('distribution of mpg')
#distribution of mpg by origin
ggplot(data = mpg,
aes(x=origin,y=mpg))+
geom_boxplot()+
xlab('origin')+ylab('mpg')+
ggtitle('mpg by origin')
#Histogram of origin faceted by origin
ggplot(data = mpg,
aes(x=mpg))+
geom_histogram()+
facet_grid(~origin)
#filter out american and european cars
mpg_filtered <- filter(mpg, origin =='USA'|origin =='Europe')
#hypotheses testing
#dependent variable ~ by independent vairaible
t.test(mpg~origin,data=mpg_filtered)
#print correlation matrix for the continuous variables in mpg
select(mpg,mpg:horsepower) %>%
cor()
#visualize relationship between weight and mileage
ggplot(data=mpg,
aes(x=weight,y=mpg))+
geom_point()+
xlab('weight(pounds)')+ylab('mileage(mpg')+
ggtitle('relationship between weight and mileage')
#alternatively use pairs() to plot all combinations on the correlation matrix
select(mpg,mpg:horsepower) %>%
pairs()
#linear regression
mpg_regression <- lm(mpg~weight,data=mpg)
summary(mpg_regression)
#fit regression line into the correlation model
ggplot(data=mpg,
aes(x=weight,y=mpg))+
geom_point()+
xlab('weight(pounds)')+ylab('mileage(mpg')+
ggtitle('relationship between weight and mileage')+
geom_smooth(method=lm)
#Test/train split
#set seed to generate the same random numbers from data
set.seed(1234)
#split data
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
#confirm how many rows and columns are in each dataset
dim(mpg_train)
dim(mpg_test)
#specify what kind of model this is
lm_spec <- linear_reg()
#fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg~weight,data=mpg_train)
#get co-efficient and p-value of training model
tidy(lm_fit)
glance(lm_fit)
#make predictions on the mpg_test data
mpg_results <- predict(lm_fit,new_data = mpg_test) %>%
bind_cols(mpg_test)
mpg_results
#find the rsquar of the mpg_test data using the rsq() function
rsq(data = mpg_results, truth = mpg, estimate = .pred)
library(tidyverse)
library(readr)
library(lubridate)
library(skimr)
library(psych)
library(janitor)
#load our datasets
daily_activity <- read.csv('dailyActivity_merged.csv')
daily_intensity <- read.csv('dailyIntensities_merged.csv')
sleep_day <- read.csv('sleepDay_merged.csv')
#preview our datasets
head(daily_activity)
head(daily_intensity)
head(sleep_day)
#Check for number of unique Id
n_unique(daily_activity$Id)
n_unique(daily_intensity$Id)
n_unique(sleep_day$Id)
#Check for duplicate in the data
sum(duplicated(daily_activity))
sum(duplicated(daily_intensity))
sum(duplicated(sleep_day))
#remove duplicate in sleep_day
sleep_day <- sleep_day %>%
distinct() %>%
drop_na()
#confirm there are no duplicates
sum(duplicated(sleep_day))
#remove days of inactivity
daily_activity <-  filter(daily_activity, TotalSteps != 0)
daily_intensity <- filter(daily_intensity, SedentaryMinutes != 1440)
#check column specifications
str(daily_activity)
str(daily_intensity)
str(sleep_day)
#format dates as date
daily_activity <- daily_activity %>%
mutate(ActivityDate = as_date(ActivityDate, format = '%m/%d/%y'))
daily_intensity <- daily_intensity %>%
mutate(ActivityDay = as_date(ActivityDay, format = '%m/%d/%y'))
sleep_day <- sleep_day %>%
mutate(SleepDay = as.POSIXct(SleepDay,format ="%m/%d/%Y %I:%M:%S %p" , tz=Sys.timezone()))
#clean names and rename columns
daily_activity <- clean_names(daily_activity)
daily_intensity <- clean_names(daily_intensity)
sleep_day <- clean_names(sleep_day)
#calculate average daily steps
daily_average <- daily_activity %>%
group_by(id) %>%
summarise(average_steps = mean(total_steps), average_calories = mean(calories))
#classify users
user_type <- daily_average %>%
mutate(user_type = case_when(
average_steps < 5000 ~ "sedentary",
average_steps >= 5000 & average_steps < 7499 ~ "low active",
average_steps >= 7500 & average_steps < 9999 ~ "somewhat active",
average_steps >= 10000 ~ "Highly active"
))
#Get average sleep in minutes per user
user_sleep <- sleep_day %>%
group_by(id) %>%
summarise(average_minute_asleep = mean(total_minutes_asleep))
#join sleep data with daily average data
daily_average <- daily_average %>%
left_join(user_sleep)
#calculate percentage distribution of users
percentage_user_type <- user_type %>%
group_by(user_type) %>%
summarise(total = n()) %>%
mutate(totals = sum(total)) %>%
group_by(user_type) %>%
summarise(total_percent = total / totals) %>%
mutate(labels = scales::percent(total_percent))
#create a pie chart for user activity
percentage_user_type %>%
ggplot(aes(x = '', y=user_type, fill=user_type)) +
geom_bar(stat="identity", width=1)+
coord_polar("y", start=0)+
geom_text(aes(label = labels), position = position_stack(vjust = 0.5))+
scale_fill_manual(values=c("#55DDE0", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#999999")) +
labs(title = "User type distribution")+
theme_classic() + theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "#666666"))
setwd("C:/Users/user/Downloads/archive/Fitabase Data 4.12.16-5.12.16")
library(tidyverse)
library(readr)
library(lubridate)
library(skimr)
library(psych)
library(janitor)
#load our datasets
daily_activity <- read.csv('dailyActivity_merged.csv')
daily_intensity <- read.csv('dailyIntensities_merged.csv')
hourly_steps <- read.csv('hourlySteps_merged.csv')
sleep_day <- read.csv('sleepDay_merged.csv')
#preview our datasets
head(daily_activity)
head(daily_intensity)
head(hourly_steps)
head(sleep_day)
#Check for number of unique Id
n_unique(daily_activity$Id)
n_unique(daily_intensity$Id)
n_unique(hourly_steps$Id)
n_unique(sleep_day$Id)
#Check for duplicate in the data
sum(duplicated(daily_activity))
sum(duplicated(daily_intensity))
sum(duplicated(hourly_steps))
sum(duplicated(sleep_day))
#remove duplicate in sleep_day
sleep_day <- sleep_day %>%
distinct() %>%
drop_na()
#confirm there are no duplicates
sum(duplicated(sleep_day))
#remove days of inactivity
daily_activity <-  filter(daily_activity, TotalSteps != 0)
daily_intensity <- filter(daily_intensity, SedentaryMinutes != 1440)
#check column specifications
str(daily_activity)
str(daily_intensity)
str(hourly_steps)
str(sleep_day)
#format dates as date
daily_activity <- daily_activity %>%
mutate(ActivityDate = as_date(ActivityDate, format = '%m/%d/%y'))
daily_intensity <- daily_intensity %>%
mutate(ActivityDay = as_date(ActivityDay, format = '%m/%d/%y'))
hourly_steps <- hourly_steps %>%
mutate(ActivityHour = as.POSIXct(ActivityHour,format ="%m/%d/%Y %I:%M:%S %p" , tz=Sys.timezone()))
sleep_day <- sleep_day %>%
mutate(SleepDay = as.POSIXct(SleepDay,format ="%m/%d/%Y %I:%M:%S %p" , tz=Sys.timezone()))
#clean names and rename columns
daily_activity <- clean_names(daily_activity)
daily_intensity <- clean_names(daily_intensity)
hourly_steps <- clean_names(hourly_steps)
sleep_day <- clean_names(sleep_day)
#calculate average daily steps
daily_average <- daily_activity %>%
group_by(id) %>%
summarise(average_steps = mean(total_steps), average_calories = mean(calories, average_sedentary(mean(sedentary_minutes))))
head(daily_average)
#classify users
user_type <- daily_average %>%
mutate(user_type = case_when(
average_steps < 5000 ~ "sedentary",
average_steps >= 5000 & average_steps < 7499 ~ "low active",
average_steps >= 7500 & average_steps < 9999 ~ "somewhat active",
average_steps >= 10000 ~ "Highly active"
))
#Get average sleep in minutes per user
user_sleep <- sleep_day %>%
group_by(id) %>%
summarise(average_minute_asleep = mean(total_minutes_asleep))
#join sleep data with daily average data
daily_average <- daily_average %>%
left_join(user_sleep)
#calculate percentage distribution of users
percentage_user_type <- user_type %>%
group_by(user_type) %>%
summarise(total = n()) %>%
mutate(totals = sum(total)) %>%
group_by(user_type) %>%
summarise(total_percent = total / totals) %>%
mutate(labels = scales::percent(total_percent))
#create a pie chart for user activity
percentage_user_type %>%
ggplot(aes(x="",y=total_percent, fill=user_type)) +
geom_bar(stat = "identity", width = 1)+
coord_polar("y", start=0)+
theme_minimal()+
theme(axis.title.x= element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
plot.title = element_text(hjust = 0.5, color = "#666666")) +
scale_fill_manual(values = c("#55DDE0", "#33658A", "#2F4858", "#F6AE2D", "#F26419")) +
geom_text(aes(label = labels),
position = position_stack(vjust = 0.5))+
labs(title="User type distribution")
library(tidyverse)
library(readr)
library(lubridate)
library(skimr)
library(psych)
library(janitor)
#load our datasets
daily_activity <- read.csv('dailyActivity_merged.csv')
daily_intensity <- read.csv('dailyIntensities_merged.csv')
hourly_steps <- read.csv('hourlySteps_merged.csv')
sleep_day <- read.csv('sleepDay_merged.csv')
#preview our datasets
head(daily_activity)
head(daily_intensity)
head(hourly_steps)
head(sleep_day)
#Check for number of unique Id
n_unique(daily_activity$Id)
n_unique(daily_intensity$Id)
n_unique(hourly_steps$Id)
n_unique(sleep_day$Id)
#Check for duplicate in the data
sum(duplicated(daily_activity))
sum(duplicated(daily_intensity))
sum(duplicated(hourly_steps))
sum(duplicated(sleep_day))
#remove duplicate in sleep_day
sleep_day <- sleep_day %>%
distinct() %>%
drop_na()
#confirm there are no duplicates
sum(duplicated(sleep_day))
#remove days of inactivity
daily_activity <-  filter(daily_activity, TotalSteps != 0)
daily_intensity <- filter(daily_intensity, SedentaryMinutes != 1440)
#check column specifications
str(daily_activity)
str(daily_intensity)
str(hourly_steps)
str(sleep_day)
#format dates as date
daily_activity <- daily_activity %>%
mutate(ActivityDate = as_date(ActivityDate, format = '%m/%d/%y'))
daily_intensity <- daily_intensity %>%
mutate(ActivityDay = as_date(ActivityDay, format = '%m/%d/%y'))
hourly_steps <- hourly_steps %>%
mutate(ActivityHour = as.POSIXct(ActivityHour,format ="%m/%d/%Y %I:%M:%S %p" , tz=Sys.timezone()))
sleep_day <- sleep_day %>%
mutate(SleepDay = as.POSIXct(SleepDay,format ="%m/%d/%Y %I:%M:%S %p" , tz=Sys.timezone()))
#clean names and rename columns
daily_activity <- clean_names(daily_activity)
daily_intensity <- clean_names(daily_intensity)
hourly_steps <- clean_names(hourly_steps)
sleep_day <- clean_names(sleep_day)
#calculate average daily steps
daily_average <- daily_activity %>%
group_by(id) %>%
summarise(average_steps = mean(total_steps), average_calories = mean(calories), average_sedentary = mean(sedentary_minutes))
head(daily_average)
#classify users
user_type <- daily_average %>%
mutate(user_type = case_when(
average_steps < 5000 ~ "sedentary",
average_steps >= 5000 & average_steps < 7499 ~ "low active",
average_steps >= 7500 & average_steps < 9999 ~ "somewhat active",
average_steps >= 10000 ~ "Highly active"
))
#Get average sleep in minutes per user
user_sleep <- sleep_day %>%
group_by(id) %>%
summarise(average_minute_asleep = mean(total_minutes_asleep))
#join sleep data with daily average data
daily_average <- daily_average %>%
left_join(user_sleep)
#calculate percentage distribution of users
percentage_user_type <- user_type %>%
group_by(user_type) %>%
summarise(total = n()) %>%
mutate(totals = sum(total)) %>%
group_by(user_type) %>%
summarise(total_percent = total / totals) %>%
mutate(labels = scales::percent(total_percent))
#create a pie chart for user activity
percentage_user_type %>%
ggplot(aes(x="",y=total_percent, fill=user_type)) +
geom_bar(stat = "identity", width = 1)+
coord_polar("y", start=0)+
theme_minimal()+
theme(axis.title.x= element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
plot.title = element_text(hjust = 0.5, color = "#666666")) +
scale_fill_manual(values = c("#55DDE0", "#33658A", "#2F4858", "#F6AE2D", "#F26419")) +
geom_text(aes(label = labels),
position = position_stack(vjust = 0.5))+
labs(title="User type distribution")
View(daily_activity)
View(daily_average)
daily_average <- daily_activity %>%
group_by(id) %>%
summarise(average_steps = mean(total_steps), average_calories = mean(calories), average_sedentary = mean(sedentary_minutes))
head(daily_average)
View(daily_activity)
weekday_inactivity <- daily_activity %>%
mutate(weekday = weekdays(activity_date))
weekday_inactivity$weekday <- ordered(daily_average(average_sedentary)$weekday,
levels=c("Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday", "Sunday"))
weekday_inactivity %>%
group_by(weekday) %>%
summarize (average_sedentary = mean(totalsteps))
weekday_inactivity %>%
group_by(weekday) %>%
summarize (average_sedentary = mean(sedentary_minutes))
weekday_inactivity$weekday <- ordered(average_sedentary$weekday,
levels=c("Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday", "Sunday"))
weekday_inactivity <- weekday_inactivity %>%
group_by(weekday) %>%
summarize (average_sedentary = mean(sedentary_minutes))
weekday_inactivity$weekday <- ordered(average_sedentary$weekday,
levels=c("Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday", "Sunday"))
View(weekday_inactivity)
weekday_inactivity$weekday <- ordered(average_sedentary$weekday,
levels=c("Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday", "Sunday"))
weekday_inactivity$weekday <- ordered(weekday_inactivity$weekday, levels = c('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'))
View(weekday_inactivity)
#Get Sedantary week day
weekday_inactivity <- daily_activity %>%
mutate(weekday = weekdays(activity_date))
weekday_inactivity$weekday <- ordered(weekday_inactivity$weekday, levels = c('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'))
weekday_inactivity <- weekday_inactivity %>%
group_by(weekday) %>%
summarize (average_sedentary = mean(sedentary_minutes))
View(weekday_inactivity)
hourly_steps %>%
ggplot() +
geom_col(mapping = aes(x=weekday, y = average_sedentary)) +
labs(title = "Users Inactive days", x="Weekday", y="Sedentary minutes") +
scale_fill_gradient(low = "green", high = "red")+
theme(axis.text.x = element_text(angle = 90))
weekday_inactivity %>%
ggplot() +
geom_col(mapping = aes(x=weekday, y = average_sedentary)) +
labs(title = "Users Inactive days", x="Weekday", y="Sedentary minutes") +
scale_fill_gradient(low = "green", high = "red")+
theme(axis.text.x = element_text(angle = 90))
weekday_inactivity %>%
ggplot() +
geom_col(mapping = aes(x=weekday, y = average_sedentary, fill = average_sedentary)) +
labs(title = "Users Inactive days", x="Weekday", y="Sedentary minutes") +
scale_fill_gradient(low = "green", high = "red")+
theme(axis.text.x = element_text(angle = 90))
View(sleep_day)
View(sleep_day)
View(sleep_day)
sleepday_activity <- sleep_day %>%
mutate(weekday = weekdays(sleep_day))
sleepday_activity$weekday <- ordered(sleepday_activity$weekday, levels = c('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'))
sleepday_activity <- sleepday_activity %>%
group_by(weekday) %>%
summarize (average_sleep = mean(total_minutes_asleep))
head(sleepday_activity)
View(sleepday_activity)
sleepday_activity %>%
ggplot() +
geom_col(mapping = aes(x=weekday, y = average_sleep, fill = average_sleep)) +
labs(title = "Users sleep activity", x="Weekday", y="average minute in asleep") +
scale_fill_gradient(low = "green", high = "red")+
theme(axis.text.x = element_text(angle = 90))
sleepday_activity %>%
ggplot() +
geom_col(mapping = aes(x=weekday, y = average_sleep, fill = average_sleep)) +
labs(title = "Users sleep activity", x="Weekday", y="average minute in asleep") +
scale_fill_gradient(low = "red", high = "green")+
theme(axis.text.x = element_text(angle = 90))
View(user_sleep)
View(sleep_day)
View(sleepday_activity)
install.packages("tinytex")
library(tinytex)
